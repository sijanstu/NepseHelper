package hamroshare.ui;

import dataalgorithms.SimpleMovingAverage;
import hamroshare.chart.ModelChart;
import java.awt.Color;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Sijan
 */
public class Technical extends javax.swing.JPanel {

    public static double averagePrice;
    public static List<Double> averages;
    public static double[] prices;
    public List<Double> averagesPeriod;
    public static double[] pricesPeriod;
    public static String company = "adbl";
    public static final DecimalFormat df = new DecimalFormat("0.00");

    /**
     * Creates new form NewJPanel
     */
    public Technical() {
        initComponents();
        btnGroup.add(per1);
        btnGroup.add(per2);
        btnGroup.add(per3);
        btnGroup.add(per4);
        lineChart.addLegend("Price", new Color(186, 37, 37), new Color(241, 100, 120));
        lineChart.addLegend("Moving Average", new Color(12, 84, 175), new Color(0, 108, 247));
    }

    public static void initChart(String company) {
        lineChart.clear();
        company = company.replace(".csv", "");
        company = company.toUpperCase() + ".csv";
        new UpdateThisLineChart().start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        roundPanel2 = new hamroshare.uicomponents.RoundPanel();
        roundPanel1 = new hamroshare.uicomponents.RoundPanel();
        lineChart = new hamroshare.chart.LineChart();
        per1 = new RSMaterialComponent.RSRadioButtonMaterial();
        per2 = new RSMaterialComponent.RSRadioButtonMaterial();
        per3 = new RSMaterialComponent.RSRadioButtonMaterial();
        per4 = new RSMaterialComponent.RSRadioButtonMaterial();
        avragePrice = new javax.swing.JLabel();
        closingPrice = new javax.swing.JLabel();
        companyComboBox1 = new javax.swing.JComboBox<>();

        setOpaque(false);

        roundPanel2.setBackground(new java.awt.Color(51, 51, 51));
        roundPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lineChart.setBackground(new java.awt.Color(51, 51, 51));
        lineChart.setForeground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineChart, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineChart, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        roundPanel2.add(roundPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 142, 370, 270));

        per1.setForeground(new java.awt.Color(0, 204, 204));
        per1.setText("15 Day");
        per1.setColorCheck(new java.awt.Color(255, 255, 255));
        per1.setColorUnCheck(new java.awt.Color(204, 204, 204));
        per1.setFocusable(false);
        per1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per1ActionPerformed(evt);
            }
        });
        roundPanel2.add(per1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 90, 40));

        per2.setForeground(new java.awt.Color(0, 204, 204));
        per2.setText("1 Month");
        per2.setColorCheck(new java.awt.Color(255, 255, 255));
        per2.setColorUnCheck(new java.awt.Color(204, 204, 204));
        per2.setFocusable(false);
        per2.setMaximumSize(new java.awt.Dimension(65, 25));
        per2.setMinimumSize(new java.awt.Dimension(65, 25));
        per2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per2ActionPerformed(evt);
            }
        });
        roundPanel2.add(per2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 100, 40));

        per3.setForeground(new java.awt.Color(0, 204, 204));
        per3.setText("3 Month");
        per3.setColorCheck(new java.awt.Color(255, 255, 255));
        per3.setColorUnCheck(new java.awt.Color(204, 204, 204));
        per3.setFocusable(false);
        per3.setMaximumSize(new java.awt.Dimension(65, 25));
        per3.setMinimumSize(new java.awt.Dimension(65, 25));
        per3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per3ActionPerformed(evt);
            }
        });
        roundPanel2.add(per3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 100, 40));

        per4.setForeground(new java.awt.Color(0, 204, 204));
        per4.setText("1 Year");
        per4.setColorCheck(new java.awt.Color(255, 255, 255));
        per4.setColorUnCheck(new java.awt.Color(204, 204, 204));
        per4.setFocusable(false);
        per4.setMaximumSize(new java.awt.Dimension(65, 25));
        per4.setMinimumSize(new java.awt.Dimension(65, 25));
        per4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per4ActionPerformed(evt);
            }
        });
        roundPanel2.add(per4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 100, 40));

        avragePrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        avragePrice.setForeground(new java.awt.Color(0, 255, 204));
        avragePrice.setText("Average Price:");
        roundPanel2.add(avragePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        closingPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        closingPrice.setForeground(new java.awt.Color(0, 255, 204));
        closingPrice.setText("Closing price: ");
        roundPanel2.add(closingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        companyComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        companyComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companyComboBox1ActionPerformed(evt);
            }
        });
        roundPanel2.add(companyComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 130, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roundPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void per1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per1ActionPerformed
        updateChart(15, 30);
        lineChart.blankPlotChart.setMaxValues(getMaxValue(pricesPeriod));
    }//GEN-LAST:event_per1ActionPerformed

    private void per2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per2ActionPerformed
        updateChart(90, 90);
        lineChart.blankPlotChart.setMaxValues(getMaxValue(pricesPeriod));
    }//GEN-LAST:event_per2ActionPerformed

    private void per3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per3ActionPerformed
        updateChart(180, 200);
        lineChart.blankPlotChart.setMaxValues(getMaxValue(pricesPeriod));
    }//GEN-LAST:event_per3ActionPerformed

    private void per4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per4ActionPerformed
        updateChart(365, 1000);
        lineChart.blankPlotChart.setMaxValues(getMaxValue(pricesPeriod));
    }//GEN-LAST:event_per4ActionPerformed

    private void companyComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyComboBox1ActionPerformed
if (isfirst < 2) {
            isfirst++;
        } else {
            if ((String) companyComboBox1.getSelectedItem() != null) {
                //System.out.println(companyComboBox1.getSelectedItem().toString());
                company = companyComboBox1.getSelectedItem().toString() + ".csv";
                lineChart.clear();
                lineChart.repaint();
                new UpdateThisLineChart().start();

            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_companyComboBox1ActionPerformed
    static int isfirst = 0;

    public static double getMaxValue(double[] numbers) {
        double maxValue = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] > maxValue) {
                maxValue = numbers[i];
            }
        }
        return maxValue;
    }

    public static double getMinValue(double[] numbers) {
        double minValue = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] < minValue) {
                minValue = numbers[i];
            }
        }
        return minValue;
    }

    void createChart(double[] prices, List<Double> averages) {
        lineChart.clear();
        for (int i = 0; i < prices.length; i++) {
            lineChart.addData(new ModelChart("", new double[]{prices[i], averages.get(i)}));
        }
        lineChart.start();
    }

    void updateChart(int period, int dataSize) {
        //lineChart.clear();
        System.out.println(Arrays.toString(prices));
        if (prices == null) {
            try {
                company = company.replace(".csv", "");
                company = company.toUpperCase() + ".csv";
                prices = StockPrices.getCompanyPrices();
                
            } catch (IOException ex) {
                Logger.getLogger(Technical.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        pricesPeriod = new double[dataSize];
        
        if (prices.length - 1 < dataSize) {
            pricesPeriod = new double[dataSize];
            int sizediff = dataSize - prices.length;
            System.arraycopy(prices, 0, pricesPeriod, sizediff, prices.length);
        } else {
            //System.arraycopy(prices, prices.length-dataSize, pricesPeriod, 0, dataSize);
            //System.out.println(pricesPeriod[pricesPeriod.length-1]);
            for (int i = dataSize - 1; i >= 0; i--) {
                if (prices.length > i - 1) {
                    pricesPeriod[dataSize - 1 - i] = prices[prices.length - i - 1];
                }
            }
        }
        List<Double> avgPrices = SimpleMovingAverage.getMovingAverage(pricesPeriod, period);
        createChart(pricesPeriod, avgPrices);
        closingPrice.setText("Closing Price: Rs." + pricesPeriod[pricesPeriod.length - 1]);
        avragePrice.setText("Average Price: Rs." + df.format(avgPrices.get(avgPrices.size() - 1)));
    }

    static public class UpdateThisLineChart extends Thread {

        @Override
        public void run() {
            try {
                //lineChart.clear();
                prices = StockPrices.getCompanyPrices();
                averages = SimpleMovingAverage.getMovingAverage(prices, 30);
                per1.doClick();
                averagePrice = averages.get(averages.size() - 1);
                closingPrice.setText("Closing Price: Rs." + prices[prices.length - 1]);
                avragePrice.setText("Average Price: Rs." + df.format(averagePrice));
                lineChart.repaint();
            } catch (IOException ex) {
                Logger.getLogger(UpdateThisLineChart.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Couldn't get Company Data: " + company);
            }

        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel avragePrice;
    private javax.swing.ButtonGroup btnGroup;
    public static javax.swing.JLabel closingPrice;
    public static javax.swing.JComboBox<String> companyComboBox1;
    public static hamroshare.chart.LineChart lineChart;
    public static RSMaterialComponent.RSRadioButtonMaterial per1;
    private RSMaterialComponent.RSRadioButtonMaterial per2;
    private RSMaterialComponent.RSRadioButtonMaterial per3;
    public static RSMaterialComponent.RSRadioButtonMaterial per4;
    private hamroshare.uicomponents.RoundPanel roundPanel1;
    private hamroshare.uicomponents.RoundPanel roundPanel2;
    // End of variables declaration//GEN-END:variables

}
