package hamroshare.chart;

import dataalgorithms.SimpleMovingAverage;
import static hamroshare.chart.AverageChart.averagePrice;
import static hamroshare.chart.AverageChart.averages;
import static hamroshare.chart.AverageChart.company;
import static hamroshare.chart.AverageChart.df;
import static hamroshare.chart.AverageChart.lineChart;
import static hamroshare.chart.AverageChart.per1;
import static hamroshare.chart.AverageChart.per4;
import static hamroshare.chart.AverageChart.prices;
import hamroshare.ui.StockPrices;
import java.awt.Color;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Sijan Bhandari
 */
public final class AverageChart extends javax.swing.JFrame {

    /**
     * Creates new form AverageChart
     *
     * @throws java.io.IOException
     */
    public static final DecimalFormat df = new DecimalFormat("0.00");
    static double[] prices;
    static List<Double> averages;
    double[] pricesPeriod;
    List<Double> averagesPeriod;
    public static String company;
    public static double averagePrice;

    public AverageChart() {
        initComponents();
        btnGroup.add(per1);
        btnGroup.add(per2);
        btnGroup.add(per3);
        btnGroup.add(per4);
        initChart("adbl");
    }

    public void initChart(String company) {
        AverageChart.company = company.toUpperCase() + ".csv";
        new UpdateLineChart().start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        per4 = new RSMaterialComponent.RSRadioButtonMaterial();
        per3 = new RSMaterialComponent.RSRadioButtonMaterial();
        per2 = new RSMaterialComponent.RSRadioButtonMaterial();
        per1 = new RSMaterialComponent.RSRadioButtonMaterial();
        lineChart = new hamroshare.chart.LineChart();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        per4.setText("1 Year");
        per4.setFocusable(false);
        per4.setMaximumSize(new java.awt.Dimension(65, 25));
        per4.setMinimumSize(new java.awt.Dimension(65, 25));
        per4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per4ActionPerformed(evt);
            }
        });
        jPanel1.add(per4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 7, 100, 40));

        per3.setText("3 Month");
        per3.setFocusable(false);
        per3.setMaximumSize(new java.awt.Dimension(65, 25));
        per3.setMinimumSize(new java.awt.Dimension(65, 25));
        per3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per3ActionPerformed(evt);
            }
        });
        jPanel1.add(per3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 7, 100, 40));

        per2.setText("1 Month");
        per2.setFocusable(false);
        per2.setMaximumSize(new java.awt.Dimension(65, 25));
        per2.setMinimumSize(new java.awt.Dimension(65, 25));
        per2.setOpaque(true);
        per2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per2ActionPerformed(evt);
            }
        });
        jPanel1.add(per2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 7, 100, 40));

        per1.setText("3 Day");
        per1.setFocusable(false);
        per1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                per1ActionPerformed(evt);
            }
        });
        jPanel1.add(per1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 7, 100, 40));
        jPanel1.add(lineChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 44, 460, 370));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -3, 470, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void per2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per2ActionPerformed
        updateChart(30, 2000);
    }//GEN-LAST:event_per2ActionPerformed

    private void per4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per4ActionPerformed
        updateChart(365, 1000);
    }//GEN-LAST:event_per4ActionPerformed

    private void per3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per3ActionPerformed
        updateChart(90, 200);
    }//GEN-LAST:event_per3ActionPerformed


    private void per1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_per1ActionPerformed
        updateChart(3, 30);
        lineChart.blankPlotChart.setMaxValues(getMaxValue(pricesPeriod));

    }//GEN-LAST:event_per1ActionPerformed
    int stateCount = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AverageChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AverageChart().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JPanel jPanel1;
    public static hamroshare.chart.LineChart lineChart;
    public static RSMaterialComponent.RSRadioButtonMaterial per1;
    private RSMaterialComponent.RSRadioButtonMaterial per2;
    private RSMaterialComponent.RSRadioButtonMaterial per3;
    public static RSMaterialComponent.RSRadioButtonMaterial per4;
    // End of variables declaration//GEN-END:variables

    public static double getMaxValue(double[] numbers) {
        double maxValue = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] > maxValue) {
                maxValue = numbers[i];
            }
        }
        return maxValue;
    }

    public static double getMinValue(double[] numbers) {
        double minValue = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] < minValue) {
                minValue = numbers[i];
            }
        }
        return minValue;
    }

    void createChart(double[] prices, List<Double> averages) {
        lineChart.clear();

        for (int i = 0; i < prices.length; i++) {
            lineChart.addData(new ModelChart("", new double[]{prices[i], averages.get(i)}));
        }
        lineChart.start();
    }

    void updateChart(int period, int dataSize) {

        pricesPeriod = new double[dataSize];
        for (int i = dataSize - 1; i >= 0; i--) {
            if (prices.length > i - 1) {
                pricesPeriod[dataSize - 1 - i] = prices[prices.length - i - 1];
            }
        }
        createChart(pricesPeriod, SimpleMovingAverage.getMovingAverage(pricesPeriod, period));
    }
}

class UpdateLineChart extends Thread {

    @Override
    public void run() {
        try {
            prices = StockPrices.getCompanyPrices(company);
            averages = SimpleMovingAverage.getMovingAverage(prices, 30);
            lineChart.addLegend("Price", new Color(186, 37, 37), new Color(241, 100, 120));
            lineChart.addLegend("Moving Average", new Color(12, 84, 175), new Color(0, 108, 247));
            per4.doClick();
            averagePrice = averages.get(averages.size() - 1);
            System.out.println("Closing price:"+prices[prices.length-1]);
            System.out.println("Average price:"+df.format(averagePrice));
        } catch (IOException ex) {
            Logger.getLogger(UpdateLineChart.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Couldn't get Company Data: " + company);
        }

    }

}
